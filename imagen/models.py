from django.db import models
from django.utils.translation import gettext_lazy as _

class Path(models.Model):
    final_prompt = models.TextField(
        _("Final Prompt Used for Generation"),
        help_text=_("The exact prompt sent to the image generation service.")
    )
    created_at = models.DateTimeField(
        _("Creation Date"),
        auto_now_add=True
    )

    class Meta:
        verbose_name = _("Image Generation Path")
        verbose_name_plural = _("Image Generation Paths")
        ordering = ['-created_at']

    def __str__(self):
        return f"Path {self.id} - {self.created_at.strftime('%Y-%m-%d %H:%M')}"

class GeneratedImage(models.Model):
    path = models.ForeignKey(
        Path,
        related_name='images',
        on_delete=models.CASCADE,
        verbose_name=_("Parent Path")
    )
    image_file = models.ImageField(
        _("Image File"),
        upload_to='generated_images/%Y/%m/%d/'
    )
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = _("Generated Image")
        verbose_name_plural = _("Generated Images")
        ordering = ['created_at']

    def __str__(self):
        return f"Image for {self.path}"

class ContentGeneration(models.Model):
    gemini_request = models.TextField(
        _("Gemini Request"),
        blank=True,
        help_text=_("Initial user request for generating a prompt (e.g., 'A cat in space').")
    )
    prompt = models.TextField(
        _("Prompt (Response)"),
        blank=True,
        help_text=_("The detailed prompt generated by Gemini, used for image creation.")
    )
    rules_geminy = models.TextField(
        _("Gemini Pravila"),
        blank=True,
        help_text=_("Dodatna pravila ili kontekst koji se dodaje na Gemini request.")
    )
    rules_imagen = models.TextField(
        _("Imagen Pravila"),
        blank=True,
        help_text=_("Dodatna pravila ili stil koji se dodaje na finalni prompt za Imagen.")
    )
    prompt_tokens = models.PositiveIntegerField(
        _("Prompt Tokens"),
        default=0,
        help_text=_("Number of tokens used for the prompt.")
    )
    completion_tokens = models.PositiveIntegerField(
        _("Completion Tokens"),
        default=0,
        help_text=_("Number of tokens generated in the response.")
    )
    image_count = models.PositiveIntegerField(
        _("Broj generiranih slika"),
        default=0,
        help_text=_("Ukupan broj slika generiran za ovaj unos.")
    )
    path = models.ForeignKey(
        Path,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name=_("Image Generation Path"),
        help_text=_("Links to the set of images generated from the prompt.")
    )
    attributes = models.TextField(
        _("Attributes"),
        blank=True,
        help_text=_("Additional attributes or notes, for now a simple text field.")
    )
    ig_content = models.TextField(
        _("Instagram Content"),
        blank=True,
        help_text=_("The final text content for the Instagram post.")
    )
    published = models.BooleanField(
        _("Published"),
        default=False,
        help_text=_("Indicates if the post has been published to Instagram.")
    )
    publishing_date = models.DateTimeField(
        _("Publishing Date"),
        null=True,
        blank=True,
        help_text=_("Scheduled or actual date of publishing.")
    )
    ig_post_id = models.CharField(
        _("Instagram Post ID"),
        max_length=255,
        blank=True,
        null=True,
        help_text=_("The unique ID of the post on Instagram after publishing.")
    )
    order = models.PositiveIntegerField(
        _("Order"),
        default=0,
        help_text=_("A number for ordering items in the admin list.")
    )
    views = models.PositiveIntegerField(_("Views"), default=0)
    likes = models.PositiveIntegerField(_("Likes"), default=0)
    comments = models.PositiveIntegerField(_("Comments"), default=0)
    follows = models.PositiveIntegerField(_("Follows"), default=0)

    class Meta:
        verbose_name = _("Content Generation")
        verbose_name_plural = _("Content Generations")
        ordering = ['order', '-publishing_date']

    def __str__(self):
        return f"Content Generation #{self.id}"